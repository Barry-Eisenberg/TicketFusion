name: Build and publish Docker image

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      issues: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Lowercase repository name
        id: lower
        shell: bash
        run: |
          # use bash parameter expansion to lowercase without adding quotes
          repo="${GITHUB_REPOSITORY,,}"
          echo "repo=$repo" >> "$GITHUB_OUTPUT"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ steps.lower.outputs.repo }}:latest
            ghcr.io/${{ steps.lower.outputs.repo }}:${{ github.sha }}

      - name: Inspect pushed image
        run: |
          echo "Inspecting image ghcr.io/${{ steps.lower.outputs.repo }}:latest"
          docker buildx imagetools inspect ghcr.io/${{ steps.lower.outputs.repo }}:latest --raw > image_inspect.json || true
          echo "--- image_inspect.json ---"
          cat image_inspect.json || true

      - name: Create issue announcing published image
        if: ${{ success() }}
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const repo = context.repo;
            const imageLatest = `ghcr.io/${repo.owner.toLowerCase()}/${repo.repo.toLowerCase()}:latest`;
            const runUrl = `https://github.com/${repo.owner}/${repo.repo}/actions/runs/${context.runId}`;
            let body = `The Docker image was built and pushed to **${imageLatest}** by workflow **${context.workflow}**.\n\nRun details: ${runUrl}`;
            try {
              const raw = fs.readFileSync('image_inspect.json', 'utf8');
              const info = JSON.parse(raw);
              if (info && info.manifests && info.manifests.length>0) {
                const m = info.manifests[0];
                const digest = m.digest || (m.digest && m.digest[0]) || 'unknown';
                const size = m.size || 'unknown';
                body += `\n\nImage metadata:\n- digest: ${digest}\n- size (bytes): ${size}`;
              }
            } catch (e) {
              body += `\n\nNote: failed to read image metadata: ${e.message}`;
            }
            await github.issues.create({
              owner: repo.owner.toLowerCase(),
              repo: repo.repo.toLowerCase(),
              title: `Docker image published: ${imageLatest}`,
              body: body
            });
